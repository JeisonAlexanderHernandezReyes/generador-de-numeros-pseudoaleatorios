# -*- coding: utf-8 -*-
"""De la generación de los números.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-6GWnr9Agr89Imf60ZdLsJtq2qs320C
"""

# Importación de las bibliotecas necesarias
from ipywidgets import widgets, interact, interactive
from IPython.display import display
import matplotlib.pyplot as plt
from random import uniform

# Generación de números pseudoaleatorios mediante Cuadrados Medios
def cuadrados_medios(seed, n):
    """
    Genera una lista de números pseudoaleatorios utilizando el método de cuadrados medios.

    Parámetros:
    seed (int): Valor semilla para el generador.
    n (int): Número de elementos que se desean generar.

    Retorna:
    list: Lista con 'n' números pseudoaleatorios.
    """
    x = seed
    results = []
    for _ in range(n):
        x = x ** 2
        x_str = str(x).zfill(8)  # Rellenar con ceros para asegurar que tenga 8 dígitos
        x = int(x_str[2:6])
        results.append(x / 10000)
    return results

# Generación de números pseudoaleatorios mediante métodos congruenciales
def congruenciales(a, c, m, seed, n):
    """
    Genera una lista de números pseudoaleatorios utilizando métodos congruenciales.

    Parámetros:
    a, c, m (int): Constantes del método congruencial.
    seed (int): Valor semilla para el generador.
    n (int): Número de elementos que se desean generar.

    Retorna:
    list: Lista con 'n' números pseudoaleatorios.
    """
    x = seed
    results = []
    for _ in range(n):
        x = (a * x + c) % m
        results.append(x / m)
    return results

# Generación de números con distribución uniforme
def uniform_distribution(a, b, n):
    """
    Genera una lista de 'n' números aleatorios con una distribución uniforme entre 'a' y 'b'.

    Parámetros:
    a, b (float): Rango para la distribución uniforme.
    n (int): Número de elementos que se desean generar.

    Retorna:
    list: Lista con 'n' números aleatorios.
    """
    return [uniform(a, b) for _ in range(n)]

# Generación de números con distribución uniforme
def uniform_distribution(a, b, n):
    """
    Genera una lista de 'n' números aleatorios con una distribución uniforme entre 'a' y 'b'.

    Parámetros:
    a, b (float): Rango para la distribución uniforme.
    n (int): Número de elementos que se desean generar.

    Retorna:
    list: Lista con 'n' números aleatorios.
    """
    return [uniform(a, b) for _ in range(n)]

# Función para dibujar el histograma de los números generados
def draw_graph(data):
    """
    Dibuja un histograma de los números en 'data'.

    Parámetros:
    data (list): Lista de números para el histograma.
    """
    plt.hist(data, bins=10, density=True, alpha=0.75, edgecolor="black")
    plt.title("Distribución de números generados")
    plt.xlabel("Número")
    plt.ylabel("Frecuencia")
    plt.show()

# Función principal para la generación de números
def generate_numbers(method, seed, n):
    """
    Genera números pseudoaleatorios basados en el método seleccionado y dibuja su histograma.

    Parámetros:
    method (str): Método de generación de números ('Cuadrados Medios', 'Congruenciales', 'Uniforme', 'Normal').
    seed (int): Valor semilla para el generador.
    n (int): Número de elementos que se desean generar.
    """
    if seed <= 0 or n <= 0:
        print("La semilla y el número de datos deben ser mayores que 0.")
        return

    if method == "Cuadrados Medios":
        data = cuadrados_medios(seed, n)
    elif method == "Congruenciales":
        data = congruenciales(1664525, 1013904223, 2**32, seed, n)
    elif method == "Uniforme":
        data = uniform_distribution(0, 1, n)
    elif method == "Normal":
        data = normal_distribution(0, 1, n)

    draw_graph(data)

# Interfaz gráfica utilizando widgets
method_widget = widgets.Dropdown(
    options=["Cuadrados Medios", "Congruenciales", "Uniforme", "Normal"],
    description="Método:"
)

seed_widget = widgets.IntText(value=1, description="Semilla:", min=1)

n_widget = widgets.IntText(value=100, description="Nº de datos:", min=1)

# Interacción con el usuario
interact(generate_numbers, method=method_widget, seed=seed_widget, n=n_widget)